
Works the same as HTTP protocol but with some additionsl features! See below!

Beside the standart HTTP request and communication, HTTPS needs to make TLC/ssl handshake.

The goal of this handshake: produce the same symmetric kóí fot both sides! (client + server)

(Note: That key allows client/server to decrypt the recieved data.)

The process of this handshake :
 
 -TLS 1.2
   * TCP Handshake *
	...
   * TLS Handshake *
   //Certificate check begin //
client -> (Client Hello) -> server
	         |
		 \-> set of encryption algorithms, TLS version

client <- (Server Hello) <- server
client <- (Certificate with PUBLIC key inside) <- server (Generates cert + private key)
client <- (Server Hello done) <- server
  //Certificate check end //

 //Key exchange begin //

client    Key exchange msg 
       -> Change cipher cpec -> server
 	  Finished

client    Change cipher spec
       <- Finished	     <- server
client: (Generates SESSION KEY(encryption data key) nad encrypt it by servers's PUBLIC KEY)

client -> (Encrypted SESSION KEY) -> server (had SESSION KEY)
server: Decrypt Encrypted SESSION KEY by own PRIVATE KEY)
 //Key exchange end//

 // Data transmission //

client-> (Encrypted data by SESSION KEY) -> server

Problems:
 -attackers can steal server private key -> problems



 -TLS 1.3 Diffie Hellman

  Note 1: (3 key : blue - client PRIVATE key, red - server PRIVATE key, pink - PUBLIC key)
	-> blue + red + pink = symmetric private key!
  Note 2:
	We can combine them into unbreakable public pairs and send over the wire:
		-> blue + PINK == public/unbreakable 
		-> red + PINK == public/unbreakable
   
 1) client -> ( pink + pair(blue + pink)) -> server
    |					     |
    \-> Generates blue + pink 		     \-> Generates red
 
 2) server : has red and got pair(pink+ blue) ==> server has SYMMETRIC KEY!
  
 3) client <- ( pair(pink + red) ) <- server
 4) client : has pink + blue and got red ==> client has SYMMETRIC KEY!
 5) We are done!!
  